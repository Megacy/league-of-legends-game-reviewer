const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electronAPI', {
  startRecording: (settings) => ipcRenderer.invoke('start-recording', settings),
  stopRecording: () => ipcRenderer.invoke('stop-recording'),
  setAutoRecord: (enabled) => ipcRenderer.invoke('set-auto-record', enabled),
  getEventsForVideo: (fileBase) => ipcRenderer.invoke('get-events-for-video', fileBase),
  testLeagueApi: () => ipcRenderer.invoke('test-league-api'),
  getLeaguePlayerInfo: () => ipcRenderer.invoke('get-league-player-info'),
  getLatestRecording: () => ipcRenderer.invoke('get-latest-recording'),
  onLoadLatestRecording: (callback) => ipcRenderer.on('load-latest-recording', callback),
  onRecordingStarted: (callback) => ipcRenderer.on('recording-started', callback),
  onRecordingStopped: (callback) => ipcRenderer.on('recording-stopped', callback),
  selectRecordingsDirectory: () => ipcRenderer.invoke('select-recordings-directory'),
  selectVideoFile: () => ipcRenderer.invoke('select-video-file'),
  getRecordingsDirectory: () => ipcRenderer.invoke('get-recordings-directory'),
  exportClip: (params) => ipcRenderer.invoke('export-clip', params),
  isFfmpegAvailable: () => ipcRenderer.invoke('is-ffmpeg-available'),
  getRecordingFilePath: (fileBase) => ipcRenderer.invoke('get-recording-file-path', fileBase),
  getVideoUrl: (fileBase) => ipcRenderer.invoke('get-video-url', fileBase),
  getExternalVideoUrl: (filePath) => ipcRenderer.invoke('get-external-video-url', filePath),
  listAvfoundationDevices: () => ipcRenderer.invoke('list-avfoundation-devices'),
  getVideoSettings: () => ipcRenderer.invoke('get-video-settings'),
  setVideoSettings: (settings) => ipcRenderer.invoke('set-video-settings', settings),
  getTimelineSettings: () => ipcRenderer.invoke('get-timeline-settings'),
  setTimelineSettings: (settings) => ipcRenderer.invoke('set-timeline-settings', settings),
  getAutoRecord: () => ipcRenderer.invoke('get-auto-record'),
  openSystemPermissions: (type) => ipcRenderer.invoke('open-system-permissions', type),
  hasScreenPermission: () => ipcRenderer.invoke('has-screen-permission'),
  getRecordingMode: () => ipcRenderer.invoke('get-recording-mode'),
  setRecordingMode: (mode) => ipcRenderer.invoke('set-recording-mode', mode),
  testObsConnection: (address, password) => ipcRenderer.invoke('test-obs-connection', address, password),
  getObsConnectionStatus: () => ipcRenderer.invoke('get-obs-connection-status'),
  getObsRecordingSettings: () => ipcRenderer.invoke('get-obs-recording-settings'),
  getFfmpegCommand: (settings) => ipcRenderer.invoke('getFfmpegCommand', settings),
  
  // Auto-updater APIs
  checkForUpdates: () => ipcRenderer.invoke('check-for-updates'),
  installUpdate: () => ipcRenderer.invoke('install-update'),
  getAppVersion: () => ipcRenderer.invoke('get-app-version'),
  onUpdateAvailable: (callback) => ipcRenderer.on('update-available', callback),
  onUpdateDownloaded: (callback) => ipcRenderer.on('update-downloaded', callback),
});
